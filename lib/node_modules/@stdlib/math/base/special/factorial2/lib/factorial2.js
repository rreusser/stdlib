'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var DOUBLE_FACTORIALS = require( './doublefactorials.json' );


// VARIABLES //

var MAX_DOUBLE_FACTORIAL = 300; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the double factorial of `x`.
*
* @param {number} x - input value
* @returns {number} double factorial
*
* @example
* var v = factorial2( 3.0 );
* // returns 3.0
*
* v = factorial2( 0.5 );
* // returns NaN
*
* v = factorial2( -10.0 );
* // returns NaN
*
* v = factorial2( 301.0 );
* // returns Number.POSITIVE_INFINITY
*
* v = factorial2( NaN );
* // returns NaN
*/
function factorial2( x ) {
	if ( isnan( x ) ) {
		return NaN;
	}
	if ( isInteger( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_DOUBLE_FACTORIAL ) {
			return DOUBLE_FACTORIALS[ x ];
		}
		return PINF;
	}
	return NaN;
} // end FUNCTION factorial2()


// EXPORTS //

module.exports = factorial2;
